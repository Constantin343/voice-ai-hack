// @ts-nocheck
'use client'
import { motion } from 'framer-motion'
import { useEffect, useState } from 'react'


interface AnimatedLogoProps {
    isSpeaking: boolean
}

const AnimatedLogo: React.FC<AnimatedLogoProps> = ({ isSpeaking }) => {
  const [currentAnimation, setCurrentAnimation] = useState<'static' | 'animate' | 'loop'>('static')


  const variants = {
    static: {
      d: "M646.5,162.5C773.278,157.843 880.444,200.843 968,291.5C1041.05,375.71 1073.05,473.71 1064,585.5C1058.36,642.076 1038.36,692.743 1004,737.5C955.628,794.176 895.128,813.343 822.5,795C794.495,787.332 766.495,779.666 738.5,772C673.007,758.494 627.173,782.327 601,843.5C591.844,869.079 588.511,895.412 591,922.5C593.386,942.203 596.053,961.869 599,981.5C600.466,994.469 600.799,1007.47 600,1020.5C594.162,1053.85 574.328,1069.01 540.5,1066C524.12,1063.88 509.12,1058.21 495.5,1049C475.549,1035.06 457.382,1018.89 441,1000.5C385,935.167 329,869.833 273,804.5C246.069,773.966 222.069,741.299 201,706.5C145.576,608.242 139.909,507.242 184,403.5C220.058,330.776 274.224,275.942 346.5,239C425.156,200.25 508.156,176.25 595.5,167C612.625,165.159 629.625,163.659 646.5,162.5Z",
    },
    animate: {
      d: "M698.5,162.5C825.278,157.843 855.444,142.843 943,233.5C1016.05,317.71 1035.05,350.71 1055,418.5C1061.36,467.076 1105.36,578.743 1060,673.5C1038.61,718.176 1020.13,777.343 971.5,822C946.495,844.963 941.476,864.019 897.5,885C847.047,909.072 834.255,896.327 803,906.5C777.166,914.909 752.959,907.687 726,933.5C708.386,950.365 691.053,974.15 672,994.5C654.356,1013.35 647.237,1021.27 624.438,1034.5C606.6,1044.85 565.328,1049.01 535.5,1043C516.12,1039.1 466.12,1025.21 452.5,1022C443.549,1019.89 349.382,995.89 333,977.5C277,912.167 309,894.833 253,829.5C226.069,798.966 224.069,727.299 203,692.5C147.576,594.242 114.909,511.242 159,407.5C195.058,334.776 237.224,284.942 309.5,248C388.156,209.25 422.156,141.25 509.5,132C526.625,130.159 681.625,163.659 698.5,162.5Z",
      transition: {
        duration: 0.6,
        ease: "easeInOut",
      }
    },
    loop: {
      d: [
        "M698.5,162.5C825.278,157.843 855.444,142.843 943,233.5C1016.05,317.71 1035.05,350.71 1055,418.5C1061.36,467.076 1105.36,578.743 1060,673.5C1038.61,718.176 1020.13,777.343 971.5,822C946.495,844.963 941.476,864.019 897.5,885C847.047,909.072 834.255,896.327 803,906.5C777.166,914.909 752.959,907.687 726,933.5C708.386,950.365 691.053,974.15 672,994.5C654.356,1013.35 647.237,1021.27 624.438,1034.5C606.6,1044.85 565.328,1049.01 535.5,1043C516.12,1039.1 466.12,1025.21 452.5,1022C443.549,1019.89 349.382,995.89 333,977.5C277,912.167 309,894.833 253,829.5C226.069,798.966 224.069,727.299 203,692.5C147.576,594.242 114.909,511.242 159,407.5C195.058,334.776 237.224,284.942 309.5,248C388.156,209.25 422.156,141.25 509.5,132C526.625,130.159 681.625,163.659 698.5,162.5Z",
        "M601,169.5C727.778,164.843 815.444,108.843 903,199.5C976.05,283.71 1019.05,302.71 1053,357.5C1076.36,406.076 1114.36,452.743 1069,547.5C1047.61,592.176 1084.13,696.343 1035.5,741C1010.5,763.963 981.476,888.019 937.5,909C887.047,933.072 859.255,972.327 828,982.5C802.166,990.909 768.959,995.687 730,1006.5C706.502,1013.02 686.11,1033.73 660,1043.5C636.356,1052.35 599.237,1063.27 582.438,1065.5C561.994,1068.21 501.627,1060.52 479.5,1046C456.954,1031.21 442.132,996.158 419.5,988C373.196,971.308 294.382,982.89 278,964.5C222,899.167 256,899.833 200,834.5C173.069,803.966 224.069,727.299 203,692.5C147.576,594.242 114.909,511.242 159,407.5C195.058,334.776 175.224,291.942 247.5,255C326.156,216.25 326.156,148.25 413.5,139C430.625,137.159 584.125,170.659 601,169.5Z",
        "M601,169.5C727.778,164.843 815.444,108.843 903,199.5C976.05,283.71 1019.05,302.71 1053,357.5C1076.36,406.076 1120.36,436.743 1075,531.5C1053.61,576.176 1035.4,655.097 1047.5,720C1058.5,778.963 1096.31,857.992 1068.5,898C1026.05,959.072 973.255,1005.33 942,1015.5C916.166,1023.91 882.959,1028.69 844,1039.5C820.502,1046.02 800.11,1066.73 774,1076.5C750.356,1085.35 713.237,1096.27 696.438,1098.5C675.994,1101.21 661.124,1110.23 601,1111C541.036,1111.77 514.132,1102.16 480.5,1097C431.848,1089.54 382.382,1070.89 343,1053.5C305,1040.17 266,1052.83 210,987.5C183.069,956.966 180.069,838.299 159,803.5C103.576,705.242 68.909,509.242 113,405.5C149.058,332.776 175.224,291.942 247.5,255C326.156,216.25 326.156,148.25 413.5,139C464.625,133.586 548.125,167.659 601,169.5Z",
        "M644.5,50.5C771.278,45.843 815.444,108.843 903,199.5C976.05,283.71 1015.05,283.71 1049,338.5C1072.36,387.076 1088.29,433.507 1109,536.5C1123.61,609.176 1096.4,685.097 1108.5,750C1119.5,808.963 1096.31,857.992 1068.5,898C1026.05,959.072 973.255,1005.33 942,1015.5C916.166,1023.91 881.72,1043.06 846,1062C820.502,1075.52 802.11,1089.23 776,1099C752.356,1107.85 715.237,1118.77 698.438,1121C677.994,1123.71 663.124,1132.73 603,1133.5C543.036,1134.27 516.132,1124.66 482.5,1119.5C433.848,1112.04 398.382,1066.39 359,1049C321,1035.67 266,1052.83 210,987.5C183.069,956.966 180.069,838.299 159,803.5C103.576,705.242 68.909,509.242 113,405.5C149.058,332.776 117.224,283.942 189.5,247C268.156,208.25 326.156,148.25 413.5,139C464.625,133.586 591.625,48.659 644.5,50.5Z",
        "M663.5,146.5C790.278,141.843 815.444,108.843 903,199.5C976.05,283.71 1001.05,276.71 1035,331.5C1058.36,380.076 1043.29,435.507 1064,538.5C1078.61,611.176 1051.4,687.097 1063.5,752C1074.5,810.963 1051.31,859.992 1023.5,900C981.047,961.072 1017.25,963.327 942,1015.5C919.673,1030.98 881.72,1043.06 846,1062C820.502,1075.52 802.11,1089.23 776,1099C752.356,1107.85 715.237,1118.77 698.438,1121C677.994,1123.71 663.124,1132.73 603,1133.5C543.036,1134.27 516.132,1124.66 482.5,1119.5C433.848,1112.04 398.382,1066.39 359,1049C321,1035.67 311,1018.83 255,953.5C228.069,922.966 180.069,838.299 159,803.5C103.576,705.242 133.909,669.242 166,504.5C179.058,423.776 102.321,266.986 177.5,207C261.156,140.25 311.156,129.25 398.5,120C449.625,114.586 610.625,144.659 663.5,146.5Z",
        "M644.5,114.5C771.278,109.843 796.444,76.843 884,167.5C957.05,251.71 1015.05,230.71 1049,285.5C1072.36,334.076 1043.29,435.507 1064,538.5C1078.61,611.176 1051.4,687.097 1063.5,752C1074.5,810.963 1051.45,860.087 1023.5,900C1015.05,912.072 992.871,912.114 942,948.5C914.13,968.435 892.72,1014.06 857,1033C831.502,1046.52 813.11,1060.23 787,1070C763.356,1078.85 747.372,1092.64 709.438,1092C648.959,1090.98 663.124,1065.73 603,1066.5C543.036,1067.27 516.132,1057.66 482.5,1052.5C433.848,1045.04 398.382,999.39 359,982C321,968.667 311,951.833 255,886.5C228.069,855.966 180.069,838.299 159,803.5C103.576,705.242 80.909,667.242 113,502.5C126.058,421.776 83.321,234.986 158.5,175C242.156,108.25 292.156,97.25 379.5,88C430.625,82.586 591.625,112.659 644.5,114.5Z",
        "M644.5,85.5C771.278,80.843 751.444,114.843 884,140.5C980.05,159.091 962.05,293.71 996,348.5C1019.36,397.076 1089.29,435.507 1110,538.5C1124.61,611.176 1082.4,691.097 1094.5,756C1105.5,814.963 1059.88,870.502 1023.5,900C994.639,923.405 992.871,912.114 942,948.5C914.13,968.435 892.72,1014.06 857,1033C831.502,1046.52 813.11,1060.23 787,1070C763.356,1078.85 747.372,1092.64 709.438,1092C648.959,1090.98 605.124,1119.73 545,1120.5C485.036,1121.27 458.132,1111.66 424.5,1106.5C375.848,1099.04 340.382,1053.39 301,1036C263,1022.67 253,1005.83 197,940.5C170.069,909.966 180.069,838.299 159,803.5C103.576,705.242 80.909,667.242 113,502.5C126.058,421.776 148.321,336.986 223.5,277C307.156,210.25 292.156,97.25 379.5,88C430.625,82.586 591.625,83.659 644.5,85.5Z"
      ],
      transition: {
        duration: 6,
        ease: "linear",
        repeat: Infinity,
        repeatType: "mirror",
        type: "tween",
        morphPrecision: 100,
        delay: 0.2
      }
    }
  }

  const handleClick = () => {
    return;
  }

   // Update animation state when isSpeaking changes
   useEffect(() => {
    if (isSpeaking) {
      setCurrentAnimation('animate')
    } else {
      setCurrentAnimation('static')
    }
  }, [isSpeaking])

  return (
    <motion.svg
      width="400"
      height="400"
      viewBox="0 0 1200 1200"
      onClick={handleClick}
      style={{ cursor: 'pointer' }}
    >
      <motion.path
        fill="currentColor"
        initial="static"
        animate={currentAnimation}
        variants={variants}
        onAnimationComplete={() => {
          if (currentAnimation === 'animate') {
            setCurrentAnimation('loop')
          }
        }}
      />
    </motion.svg>
  )
}

export default AnimatedLogo


